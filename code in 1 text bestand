import java.util.UUID;

public class Gebruiker {
    private String naam;
    private String wachtwoord;
    private int id = -1;

    public Gebruiker() {
        this.id = UUID.randomUUID().hashCode();
    }
    public String getNaam() {
        return naam;
    }

    public void setNaam(String naam) {
        this.naam = naam;
    }
    public String getWachtwoord() {
        return wachtwoord;
    }
    public int getId() {
        return id;
    }


    public void register(String naam, String wachtwoord) {
        this.naam = naam;
        this.wachtwoord = wachtwoord;
        this.id = UUID.randomUUID().hashCode();
        System.out.println("Je hebt een account aangemaakt");
    }
}

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.UUID;

public class Medicijn {
    private String naam;
    private String innameTijd;
    private final long innameTijdVerschilMS;
    private final int id;

    public Medicijn(String naam, String innameTijd) {
        this.naam = naam;
        this.innameTijd = innameTijd;
        this.id = UUID.randomUUID().hashCode();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        LocalTime innameTijdLocal = LocalTime.parse(innameTijd, formatter);
        LocalTime now = LocalTime.now();

        int innameTijdSeconds = innameTijdLocal.toSecondOfDay();
        int nowSeconds = now.toSecondOfDay();
        long tijdVerschil = innameTijdSeconds - nowSeconds;

        // Als de tijd negatief is, voeg dan 24 uur (in seconden) toe om de tijd correct in te stellen voor de volgende dag.
        if (tijdVerschil < 0) {
            tijdVerschil += 24 * 3600;
        }

        this.innameTijdVerschilMS = tijdVerschil * 1000L;
        System.out.println("Ik ga wachten in seconden: " + innameTijdVerschilMS / 1000L);
    }


    public String getNaam() {
        return naam;
    }

    public String getInnameTijd() {
        return innameTijd;
    }

    public long getInnameTijdVerschilMS() {
        return innameTijdVerschilMS;
    }

    public int getId() {
        return id;
    }

    public void setNaam(String naam) {
        this.naam = naam;
    }

    public void setInnameTijd(String innameTijd) {
        this.innameTijd = innameTijd;
    }

}

import java.util.ArrayList;

public class MedicijnLijst {
    private final ArrayList<Medicijn> medicijnen = new ArrayList<>();

    public void addMedicijn(Medicijn medicijn) {
        medicijnen.add(medicijn);
    }

    public void removeMedicijn(int id) {
        for (Medicijn medicijn : medicijnen) {
            if (medicijn.getId() == id) {
                medicijnen.remove(medicijn);
                return;
            }
        }
    }

    public ArrayList<Medicijn> getMedicijnen() {
        return medicijnen;
    }

    public Medicijn getMedicijnById(int id) {
        for (Medicijn medicijn : medicijnen) {
            if (medicijn.getId() == id) {
                return medicijn;
            }
        }
        return null;
    }
}


public class Reminder {
    private Medicijn medicijn;

    public Reminder(Medicijn medicijn) {
        this.medicijn = medicijn;
    }

    public Medicijn getMedicijn() {
        return this.medicijn;
    }

    public void setMedicijn(Medicijn medicijn) {
        this.medicijn = medicijn;
    }

    public void remind() {
        try {
            Thread.sleep(medicijn.getInnameTijdVerschilMS());
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Het is tijd om " + medicijn.getNaam() + " in te nemen");
    }
}


public class Bevestiging {
    private String message;
    private boolean status;

    public Bevestiging() {
        this.message = "Medicijnen zijn bevestigd";
        this.status = false;
    }

    public void bevestigRegistratie() {
        this.status = true;
        System.out.println("Het programma is klaar");
    }

    public String getMessage() {
        return message;
    }

    public boolean isStatus() {
        return status;
    }
}

import java.util.Comparator;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        MedicijnLijst medicijnLijst = new MedicijnLijst();

        Main main = new Main();

        boolean isLoggedIn = main.login();
        if (!isLoggedIn) {
            return;
        }

        System.out.println("Hoeveel medicijnen wil je registreren?");
        int aantalMedicijnen = scanner.nextInt();
        scanner.nextLine();

        for (int i = 0; i < aantalMedicijnen; i++) {
            System.out.println("Voer de naam van het medicijn in");
            String naam = scanner.nextLine();
            System.out.println("Voer de inname tijd van het medicijn in (HH:mm)");
            String innameTijd = scanner.nextLine();
            Medicijn medicijn = new Medicijn(naam, innameTijd);
            medicijnLijst.addMedicijn(medicijn);
        }

        // Medicijnen editen
        System.out.println("Wil je nog iets editen voordat ik de reminders aanmaak? (ja/nee)");
        if (scanner.nextLine().equals("ja")) {
            while (true) {
                // Geef overzicht van alle medicijnen
                for (Medicijn medicijn : medicijnLijst.getMedicijnen()) {
                    System.out.println("ID: " + medicijn.getId() + " Naam: " + medicijn.getNaam() + " Innametijd: " + medicijn.getInnameTijd());
                }

                System.out.println("Voer het ID in van de medicijn waarvan je de naam en tijd wilt wijzigen");
                int id = scanner.nextInt();
                scanner.nextLine();
                Medicijn medicijn = medicijnLijst.getMedicijnById(id);
                if (medicijn == null) {
                    System.out.println("Medicijn niet gevonden");
                    return;
                }
                System.out.println("Voer de nieuwe naam in");
                String naam = scanner.nextLine();
                System.out.println("Voer de nieuwe inname tijd in (HH:mm)");
                String innameTijd = scanner.nextLine();
                medicijn.setNaam(naam);
                medicijn.setInnameTijd(innameTijd);
                medicijnLijst.removeMedicijn(id);
                medicijnLijst.addMedicijn(medicijn);


                System.out.println("Wilt u nog een medicijn wijzigen? (ja/nee)");
                if (scanner.nextLine().equals("nee")) {
                    break;
                }
            }

        }

        // Dit sorteert onze medicijnen op basis van de inname tijd.
        medicijnLijst.
                getMedicijnen()
                .sort(Comparator.comparingLong(Medicijn::getInnameTijdVerschilMS));

        Bevestiging bevestiging = new Bevestiging();

        bevestiging.bevestigRegistratie();

        System.out.println(bevestiging.getMessage());
        System.out.println(bevestiging.isStatus());

        // Geef overzicht van alle medicijnen
        for (Medicijn medicijn : medicijnLijst.getMedicijnen()) {
            System.out.println("ID: " + medicijn.getId() + " Naam: " + medicijn.getNaam() + " Innametijd: " + medicijn.getInnameTijd());
        }

        for (Medicijn i : medicijnLijst.getMedicijnen()) {
            Reminder reminder = new Reminder(i);
            reminder.remind();
        }


    }

      public boolean login() {
            Gebruiker gebruiker = new Gebruiker();
            Scanner scanner = new Scanner(System.in);


            System.out.println("Wil je een account aanmaken? (ja/nee)");
            if (scanner.nextLine().equals("ja")) {
                System.out.println("Voer je naam in");
                String naam = scanner.nextLine();
                System.out.println("Voer je wachtwoord in");
                String wachtwoord = scanner.nextLine();
                gebruiker.register(naam, wachtwoord);
                return true;
            }
            return false;


    }

    }


